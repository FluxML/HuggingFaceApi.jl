var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HuggingFaceApi","category":"page"},{"location":"#HuggingFaceApi","page":"Home","title":"HuggingFaceApi","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HuggingFaceApi.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HuggingFaceApi]","category":"page"},{"location":"#HuggingFaceApi.HuggingFaceURL","page":"Home","title":"HuggingFaceApi.HuggingFaceURL","text":"HuggingFaceURL(repo_id, [subfolder], filename,\n               repo_type::REPO_TYPE = nothing,\n               revision::AbstractString = \"main\")\n\nConstruct the real url with the inputs.\n\n\n\n\n\n","category":"type"},{"location":"#HuggingFaceApi.cached_download-Tuple{HuggingFaceURL}","page":"Home","title":"HuggingFaceApi.cached_download","text":"cached_download(\n    hgfurl :: HuggingFaceURL;\n    local_files_only :: Bool = false,\n    auth_token :: Union{AbstractString, Nothing} = nothing,\n)\n\nFind the local cache of given url or do downloading. If local_files_only is set, it will try to  find the file from cache, and error out when not found. For downloading from private repo,  auth_token need to be set, or do HuggingFaceApi.login() beforehand.\n\nSee also: HuggingFaceURL, login\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.hf_hub_download-Tuple{AbstractString, AbstractString}","page":"Home","title":"HuggingFaceApi.hf_hub_download","text":"hf_hub_download(\n    repo_id :: AbstractString,\n    filename :: AbstractString;\n    repo_type :: REPO_TYPE = nothing,\n    revision :: AbstractString = \"main\",\n    auth_token :: Union{AbstractString, Nothing} = get_token(),\n    local_files_only :: Bool  = false,\n)\n\nConstruct HuggingFaceURL and do cached_download.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.huggingface_emoji-Tuple{}","page":"Home","title":"HuggingFaceApi.huggingface_emoji","text":"add ðŸ¤— autocomplete in REPL\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.login-Tuple{AbstractString}","page":"Home","title":"HuggingFaceApi.login","text":"login(user::AbstractString = readline())\n\nLogin to huggingface hub and get/save the account token for operations that need authentication.  Re-run this function with username (i.e. login(username)) if token expired.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.logout","page":"Home","title":"HuggingFaceApi.logout","text":"logout()\n\nLogin from huggingface hub and remove all authentication cache.\n\n\n\n\n\n","category":"function"},{"location":"#HuggingFaceApi.remove_cache-Tuple{HuggingFaceURL}","page":"Home","title":"HuggingFaceApi.remove_cache","text":"remove_cache(hgfurl::HuggingFaceURL; now=false)\n\nRemove files link to the given url. If now is set to true, cache file will be deleted immediately,  otherwise waiting OhMyArtifacts to do the garbage collection.\n\n\n\n\n\n","category":"method"}]
}
