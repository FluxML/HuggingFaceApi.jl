var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HuggingFaceApi","category":"page"},{"location":"#HuggingFaceApi","page":"Home","title":"HuggingFaceApi","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HuggingFaceApi.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HuggingFaceApi]","category":"page"},{"location":"#HuggingFaceApi.HuggingFaceURL","page":"Home","title":"HuggingFaceApi.HuggingFaceURL","text":"HuggingFaceURL(repo_id, [subfolder], filename;\n               repo_type = nothing,\n               revision = \"main\")\n\nConstruct the real url with the inputs.\n\n\n\n\n\n","category":"type"},{"location":"#HuggingFaceApi.cached_download-Tuple{HuggingFaceURL}","page":"Home","title":"HuggingFaceApi.cached_download","text":"cached_download(\n    hgfurl :: HuggingFaceURL;\n    local_files_only :: Bool = false,\n    auth_token :: Union{AbstractString, Nothing} = nothing,\n)\n\nFind the local cache of given url or do downloading. If local_files_only is set, it will try to  find the file from cache, and error out when not found. For downloading from private repo,  auth_token need to be set, or do HuggingFaceApi.login() beforehand.\n\nSee also: HuggingFaceURL, login\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.dataset_info","page":"Home","title":"HuggingFaceApi.dataset_info","text":"dataset_info(repo_id; revision = nothing, token = get_token())\n\nGet information for a specific dataset repo repo_id.\n\n\n\n\n\n","category":"function"},{"location":"#HuggingFaceApi.delete_token-Tuple{}","page":"Home","title":"HuggingFaceApi.delete_token","text":"delete_token()\n\nRemove token from the disk.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.get_token-Tuple{}","page":"Home","title":"HuggingFaceApi.get_token","text":"get_token()\n\nGet the token stored on disk.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.hf_hub_download-Tuple{AbstractString, AbstractString}","page":"Home","title":"HuggingFaceApi.hf_hub_download","text":"hf_hub_download(\n    repo_id :: AbstractString,\n    filename :: AbstractString;\n    repo_type = nothing,\n    revision = \"main\",\n    auth_token :: Union{AbstractString, Nothing} = get_token(),\n    local_files_only :: Bool  = false,\n    cache :: Bool = true,\n)\n\nConstruct HuggingFaceURL and do cached_download. If cache is false, download file  to the temp dir with name generated by tempname(). If local_files_only is set, cache must set.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.huggingface_emoji-Tuple{}","page":"Home","title":"HuggingFaceApi.huggingface_emoji","text":"add ðŸ¤— autocomplete in REPL\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.list_dataset_files","page":"Home","title":"HuggingFaceApi.list_dataset_files","text":"list_dataset_files(repo_id; revision = nothing, token = get_token())\n\nList all files in the specific dataset repo repo_id.\n\n\n\n\n\n","category":"function"},{"location":"#HuggingFaceApi.list_datasets","page":"Home","title":"HuggingFaceApi.list_datasets","text":"list_datasets(token = get_token();\n              search = nothing, author = nothing, filter = nothing,\n              sort = nothing, direction = nothing, limit = nothing,\n              full::Bool = false, cardData::Bool = false)\n\nGet information from all datasets in the Hub. You can specify additional parameters to have more specific results.\n\nsearch: Filter based on substrings for repos and their usernames, such as pets or microsoft\nauthor: Filter datasets by an other or organization, such as huggingface or microsoft\nfilter: Filter based on tags, such as task_categories:text-classification or languages:en.\nsort: Property to use when sorting, such as downloads or author.\ndirection: Direction in which to sort, such as -1 for descending, and anything else for ascending.\nlimit: Limit the number of datasets fetched.\nfull: Whether to fetch most dataset data, such as all tags, the files, etc.\ncardData: Whether to grab the metadata for the dataset as well. Can contain useful information such as the PapersWithCode ID.\n\n\n\n\n\n","category":"function"},{"location":"#HuggingFaceApi.list_metrics-Tuple{}","page":"Home","title":"HuggingFaceApi.list_metrics","text":"list_metrics()\n\nGet information from all metrics in the Hub.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.list_model_files","page":"Home","title":"HuggingFaceApi.list_model_files","text":"list_model_files(repo_id; revision = nothing, token = get_token())\n\nList all files in the specific model repo repo_id.\n\n\n\n\n\n","category":"function"},{"location":"#HuggingFaceApi.list_models","page":"Home","title":"HuggingFaceApi.list_models","text":"list_models(token = get_token();\n            search = nothing, author = nothing, filter = nothing,\n            sort = nothing, direction = nothing, limit = nothing,\n            full::Bool = !isnothing(filter), cardData::Bool = false)\n\nGet information from all models in the Hub. You can specify additional parameters to have more specific results.\n\nsearch: Filter based on substrings for repos and their usernames, such as resnet or microsoft\nauthor: Filter models by an author or organization, such as huggingface or microsoft\nfilter: Filter based on tags, such as text-classification or spacy.\nsort: Property to use when sorting, such as downloads or author.\ndirection: Direction in which to sort, such as -1 for descending, and anything else for ascending.\nlimit: Limit the number of models fetched.\nfull: Whether to fetch most model data, such as all tags, the files, etc.\ncardData: Whether to grab the metadata for the model as well, such as carbon emissions, metrics, and datasets trained on.\n\n\n\n\n\n","category":"function"},{"location":"#HuggingFaceApi.list_space_files","page":"Home","title":"HuggingFaceApi.list_space_files","text":"list_space_files(repo_id; revision = nothing, token = get_token())\n\nList all files in the specific space repo repo_id.\n\n\n\n\n\n","category":"function"},{"location":"#HuggingFaceApi.list_spaces","page":"Home","title":"HuggingFaceApi.list_spaces","text":"list_spaces(token = get_token();\n           search = nothing, author = nothing, filter = nothing,\n           datasets = nothing, models = nothing, linked::Bool = false,\n           sort = nothing, direction = nothing, limit = nothing,\n           full::Bool = false)\n\nGet information from all Spaces in the Hub. You can specify additional parameters to have more specific results.\n\nsearch: Filter based on substrings for repos and their usernames, such as resnet or microsoft\nauthor: Filter models by an author or organization, such as huggingface or microsoft\nfilter: Filter based on tags, such as text-classification or spacy.\nsort: Property to use when sorting, such as downloads or author.\ndirection: Direction in which to sort, such as -1 for descending, and anything else for ascending.\nlimit: Limit the number of models fetched.\nfull: Whether to fetch most model data, such as all tags, the files, etc.\ndatasets: Whether to return Spaces that make use of a dataset. The name of a specific dataset can be passed as a string.\nmodels: Whether to return Spaces that make use of a model. The name of a specific model can be passed as a string.\nlinked: Whether to return Spaces that make use of either a model or a dataset.\n\n\n\n\n\n","category":"function"},{"location":"#HuggingFaceApi.login-Tuple{AbstractString}","page":"Home","title":"HuggingFaceApi.login","text":"login(user::AbstractString = readline())\n\nLogin to huggingface hub and get/save the account token for operations that need authentication.  Re-run this function with username (i.e. login(username)) if token expired.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.logout","page":"Home","title":"HuggingFaceApi.logout","text":"logout()\n\nLogout from huggingface hub and remove all authentication cache.\n\n\n\n\n\n","category":"function"},{"location":"#HuggingFaceApi.model_info","page":"Home","title":"HuggingFaceApi.model_info","text":"model_info(repo_id; revision = nothing, token = get_token())\n\nGet information for a specific model repo repo_id.\n\n\n\n\n\n","category":"function"},{"location":"#HuggingFaceApi.remove_cache-Tuple{HuggingFaceURL}","page":"Home","title":"HuggingFaceApi.remove_cache","text":"remove_cache(hgfurl::HuggingFaceURL; now=false)\n\nRemove files link to the given url. If now is set to true, cache file will be deleted immediately,  otherwise waiting OhMyArtifacts to do the garbage collection.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.remove_cache-Tuple{}","page":"Home","title":"HuggingFaceApi.remove_cache","text":"remove_cache(; now=false)\n\nRemove all cached files. If now is set to true, cache file will be deleted immediately,  otherwise waiting OhMyArtifacts to do the garbage collection.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.save_token-Tuple{Any}","page":"Home","title":"HuggingFaceApi.save_token","text":"save_token(token)\n\nWrite token to the disk for future use.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceApi.space_info","page":"Home","title":"HuggingFaceApi.space_info","text":"space_info(repo_id; revision = nothing, token = get_token())\n\nGet information for a specific space repo repo_id.\n\n\n\n\n\n","category":"function"}]
}
